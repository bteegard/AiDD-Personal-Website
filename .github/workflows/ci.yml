name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9.19', '3.10.14', '3.11.9']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Initialize database
      run: |
        python -c "
        import sqlite3
        from DAL import createDatabase
        createDatabase()
        conn = sqlite3.connect('projects.db')
        cursor = conn.cursor()
        cursor.execute('SELECT name FROM sqlite_master WHERE type=\"table\" AND name=\"projects\"')
        result = cursor.fetchone()
        if result:
            print('✅ Database table created successfully')
        else:
            print('❌ Database table creation failed')
            exit(1)
        conn.close()
        "
    
    - name: Run tests
      run: |
        pytest test_database.py test_projects.py -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t bryant-website:latest .
    
    - name: Test Docker container
      run: |
        # Start the container
        docker run -d -p 8000:8000 --name test-container bryant-website:latest
        
        # Wait for the container to be ready
        echo "Waiting for container to start..."
        sleep 15
        
        # Check if container is running
        docker ps
        
        # Check container logs
        echo "Container logs:"
        docker logs test-container
        
        # Test the application with retries
        for i in {1..5}; do
          echo "Attempt $i: Testing application..."
          if curl -f http://localhost:8000/; then
            echo "✅ Application is responding!"
            break
          else
            echo "❌ Attempt $i failed, waiting 5 seconds..."
            sleep 5
          fi
        done
        
        # Final test
        curl -f http://localhost:8000/ || (echo "❌ Application failed to respond" && exit 1)
        
        # Cleanup
        docker stop test-container
        docker rm test-container
